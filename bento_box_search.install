<?php

/**
 * @file
 * Functions to be run during module install/uninstall process for Bento Box Search
 *
 */

/**
 * Implements hook_install().
 */
function bento_box_search_install() {
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['search_source']);
  add_custom_fields();
}

/**
 * Implements hook_uninstall().
 */
function bento_box_search_uninstall() {
  $customnewtype = 'search_source';
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $customnewtype));
  $nodeids = array();
  foreach ($result as $row) {
    $nodeids[] = $row->nid;
  }
  
  node_delete_multiple($nodeids);
  delete_custom_fields();
  node_type_delete($customnewtype);
  field_purge_batch(500);
}

/**
 * Sets custom field settings for the Search Source Content type
 */
function _bento_box_search_installed_fields() {
  $t = get_t();
  $fields = array();
  
  $fields['search_source_url'] = array (
    'field_name' => 'search_source_url',
    'label' => $t('Search URL for the source you wish to query (use [keywords] to replace input).'),
    'type' => 'text',
  );
  
  $fields['search_source_backup_url'] = array (
    'field_name' => 'search_source_backup_url',
    'label' => $t('Search URL if main URL yields no results. (use [keywords] to replace input).'),
    'type' => 'text',
  );
  
  $fields['search_source_format'] = array (
    'field_name' => 'search_source_format',
    'cardinality' => 1,
    'label' => $t('Are the results coming back as XML? (leave blank for HTML).'),
    'type' => 'list_boolean',
    'widget' => array(
      'type' => 'options_onoff',
    ),
    'settings' => array(
      'allowed_values' => array(
        '0' => 'No',
        '1' => 'Yes',
      ),
    ),
  );
  
  $fields['results_container'] = array (
    'field_name' => 'results_container',
    'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the results'),
    'type' => 'text',
  );
      
  $fields['single_result'] = array (
    'field_name' => 'single_result',
    'label' => $t('The ELEMENT, CLASS or ID for a single result'),
    'type' => 'text',
  );
  
  $fields['link_element'] = array (
    'field_name' => 'link_element',
    'label' => $t('The ELEMENT that contains a link to the result.'),
    'type' => 'text',
  );
    
  $fields['element_replace'] = array (
    'field_name' => 'element_replace',
    'label' => $t('Key Pair values for elements you wish to replace, one per line. (i.e. title=H1)'),
    'type' => 'text_long',
    'foreign_keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
  );
  
  $fields['element_suppress'] = array (
    'field_name' => 'element_suppress',
    'label' => $t('Elements you wish to suppress for display. (separate using commas)'),
    'type' => 'text_long',
    'foreign_keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
  );
  
  $fields['more_results_url'] = array (
    'field_name' => 'more_results_url',
    'label' => $t('The URL to use to display more search results (use [keywords] to replace input).'),
    'type' => 'text',
  );
  
  $fields['extract_profile'] = array (
    'field_name' => 'extract_profile',
    'cardinality' => 1,
    'label' => $t('Extract a librarian profile from these results?'),
    'type' => 'list_boolean',
    'widget' => array(
      'type' => 'options_onoff',
    ),
    'settings' => array(
      'allowed_values' => array(
        '0' => 'No',
        '1' => 'Yes',
      ),
    ),
  );
  
  $fields['profile_container'] = array (
    'field_name' => 'profile_container',
    'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the profile'),
    'type' => 'text',
  );
  
  return $fields;
}

/**
 * Sets custom field instance settings for the Search Source content type
 */
function _bento_box_search_installed_instances() {
  $t = get_t();
  $instances = array();
  
  $instances['search_source_url'] = array(
    'field_name' => 'search_source_url',
    'type' => 'text',
    'label' => $t('Search URL for the source you wish to query (use [keywords] to replace input).'),
    'widget'=> array(
      'type' => 'text_textfield',
      'weight' => '-5',
    ),
    'display' => array(
      'bento_box_search_field' => array(
        'label' => $t('Search URL for the source you wish to query (use [keywords] to replace input).'),
        'type' => 'text',
      ),
    ),
  );
  
  $instances['search_source_backup_url'] = array(
    'field_name' => 'search_source_backup_url',
    'type' => 'text',
    'label' => $t('Search URL if main URL yields no results. (use [keywords] to replace input).'),
    'widget'=> array(
      'type' => 'text_textfield',
      'weight' => '-4',
    ),
    'display' => array(
      'bento_box_search_field' => array(
        'label' => $t('Search URL if main URL yields no results. (use [keywords] to replace input).'),
        'type' => 'text',
      ),
    ),
  );  
  
  $instances['search_source_format'] = array (
    'field_name' => 'search_source_format',
    'cardinality' => 1,
    'label' => $t('Are the results coming back as XML? (leave blank for HTML).'),
    'type' => 'list_boolean',
    'widget' => array(
      'type' => 'options_onoff',
      'weight' => '-3',
    ),
    'settings' => array(
      'allowed_values' => array(
        '0' => 'No',
        '1' => 'Yes',
      ),
    ),
  );
    
  $instances['results_container'] = array(
    'field_name' => 'results_container',
    'type' => 'text',
    'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the results'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => '-2',
    ),
    'display' => array(
      'bento_box_results_container' => array(
        'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the results'),
        'type' => 'text',
      ),
    ),
  );

  $instances['single_result'] = array(
    'field_name' => 'single_result',
    'type' => 'text',
    'label' => $t('The ELEMENT, CLASS or ID for a single result'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => '-1',
    ),
    'display' => array(
      'bento_box_single_result' => array(
        'label' => $t('The ELEMENT, CLASS or ID for a single result'),
        'type' => 'text',
      ),
    ),
  );
  
  $instances['link_element'] = array(
    'field_name' => 'link_element',
    'type' => 'text',
    'label' => $t('The ELEMENT that contains a link to the result.'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => '0',
    ),
    'display' => array(
      'bento_box_link_element' => array(
        'label' => $t('The ELEMENT that contains a link to the result.'),
        'type' => 'text',
      ),
    ),
  );
  
  $instances['element_replace'] = array(
    'field_name' => 'element_replace',
    'type' => 'text_long',
    'label' => t('Key Pair values for elements you wish to replace, one per line. (i.e. title=H1)'),
    'widget' => array(
      'settings' => array(
        'rows' => '5',
      ),
      'type' => 'text_textarea',
      'weight' => 1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
  );
  
  $instances['element_supress'] = array(
    'field_name' => 'element_suppress',
    'type' => 'text_long',
    'label' => t('Elements you wish to suppress for display. (separate using commas)'),
    'widget' => array(
      'settings' => array(
        'rows' => '5',
      ),
      'type' => 'text_textarea',
      'weight' => 2,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
  );
  
  $instances['more_results_url'] = array(
    'field_name' => 'more_results_url',
    'type' => 'text',
    'label' => $t('The URL to use to display more results (use [keywords] to replace input).'),
    'widget'=> array(
      'type' => 'text_textfield',
      'weight' => '5',
    ),
    'display' => array(
      'bento_box_more_results_url' => array(
        'label' => $t('The URL to use to display more results (use [keywords] to replace input).'),
        'type' => 'text',
      ),
    ),
  );
  
  $instances['extract_profile'] = array (
    'field_name' => 'extract_profile',
    'cardinality' => 1,
    'label' => $t('Extract a librarian profile from these results?'),
    'type' => 'list_boolean',
    'widget' => array(
      'type' => 'options_onoff',
      'weight' => '6',
    ),
    'settings' => array(
      'allowed_values' => array(
        '0' => 'No',
        '1' => 'Yes',
      ),
    ),
  );
  
  $instances['profile_container'] = array(
    'field_name' => 'profile_container',
    'type' => 'text',
    'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the profile'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => '7',
    ),
    'display' => array(
      'bento_box_profile_container' => array(
        'label' => $t('The ELEMENT, CLASS or ID for the container that surrounds the profile'),
        'type' => 'text',
      ),
    ),
  );
  
  return $instances;
}

/**
 * Creates the new custom fields and custom field instances for the Search Source content type
 */
function add_custom_fields() {
  foreach (_bento_box_search_installed_fields() as $field) {
    field_create_field($field);
  }
  foreach (_bento_box_search_installed_instances() as $fieldinstance) {
    $fieldinstance['entity_type'] = 'node';
    $fieldinstance['bundle'] = 'search_source';
    field_create_instance($fieldinstance);
  }
}

/**
 * Deletes custom fields created during the install process
 */
function delete_custom_fields() {
  foreach (array_keys(_bento_box_search_installed_fields()) as $field) {
    field_delete_field($field);
  }
  $instances = field_info_instances('node', 'search_source');
  foreach ($instances as $instance_name => $fieldinstance) {
    field_delete_instance($fieldinstance);
  }
}
