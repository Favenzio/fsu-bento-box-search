<?php

/**
 * @file
 * Hook implementations for Bento Box Search Module
 *
 * This module creates a search block allowing users to search multiple systems.
 * It also creates a custom content type that stores information aobut the systems
 * to be queried.
 * 
 * The results page queries each system enabled using an ajax request, 
 * displaying the top results as they are received in their own box using html divs.
 */

require_once drupal_get_path('module', 'bento_box_search') . '/includes/html_parser.inc';

//TODO: Make this configurable by user
define('MAX_RESULT_COUNT', 5);
define('ZERO_RESULT_MESSAGE', '<p>Your search returned 0 results.</p>');

/**
 * Implements hook_block_info(). It lets Drupal know what blocks we want to create.
 */
function bento_box_search_block_info() {
  $blocks = array();
  $blocks['bento_box_search_block'] = array(
    'info' => t('A search box with options for systems to be searched'),
    'cache' => DRUPAL_NO_CACHE,
  );
     
  return $blocks;
}

/**
 * Implements hook_block_view(). It returns the content for the blocks we created using
 * hook_block_info().
 */
function bento_box_search_block_view($block_name = '') {
  // Check which block is being requested
  if ($block_name == 'bento_box_search_block') {
    
    $block = array(
      'content' => theme('bento_box_search_form'), //use hook_theme provided by this module.
    );
    
    return $block;
  }
}

/**
 * Implements hook_theme(). 
 */
function bento_box_search_theme() {
  return array(
    'bento_box_search_form' => array(
      'path' => drupal_get_path('module', 'bento_box_search').'/theme',
      'template' => 'bento-box-search-block', //see bento-box-search-block.tpl.php
    ),
    'bento_box_search_results' => array(
      'path' => drupal_get_path('module', 'bento_box_search').'/theme',
      'template' => 'bento-box-search-results-page', //see bento-box-search-results-page.tpl.php
    ),
  );
}

/**
 * Preprocess variables to be passed to the search block template assigned above in hook_theme().
 */
function template_preprocess_bento_box_search_form(&$variables) {
  $search_box = drupal_render (drupal_get_form('bento_search_form'));
  $variables['search_box'] = $search_box;
}

/**
 * Preprocess variables to be passed to the results page template assigned above in hook_theme().
 */
function template_preprocess_bento_box_search_results(&$variables) {
  drupal_add_js(drupal_get_path('module', 'bento_box_search') . '/js/bento_box_search.js');
  $variables['search_input'] = $_SESSION['bento_search']['search_input'];
  $result = _search_source_list();
  
  foreach ($result as $search_source) {
    $variables['search_sources'][] = $search_source;
    //replace the keywords from the search into the search url
    $bento_query_url = $search_source->nid . "|" . $variables['search_input'];
    drupal_add_js(array('bento_box_search' => 
      array($search_source->nid => $bento_query_url)), 'setting');
  }
}

/**
 * Implements hook_form() for Bento Box Search Box in block.
 */
function bento_search_form($form, &$form_state) {
  $form['bento_search_input'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  
  $form['bento_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  
  return $form;
}

/**
 * Implements hook_form_submit(). Tells Drupal what to do once the search
 * keywords have been successfully submitted.
 */
function bento_search_form_submit($form, &$form_state) {
  $_SESSION['bento_search']['search_input'] = $form_state['values']['bento_search_input'];
  $form_state['redirect'] = 'bento_search_results/' . $form_state['values']['bento_search_input'];
}

/**
 * Implements hook_menu(). Creates the path for the results page and
 * the individual query results for each system.
 */
function bento_box_search_menu() {
  $menu['bento_search_results'] = array (
    'title' => 'Search Results',
    'page callback' => 'bento_search_results_page',
    'access callback' => TRUE,
  );
  
  $menu['bento_search_query/%/%'] = array (
    'page callback' => 'bento_search_query_result',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
  );
  
  return $menu;
}

/**
 * Callback function for search results page.
 */
function bento_search_results_page() {
  $content = theme('bento_box_search_results');
  return $content;
}

/**
 * Callback function for system query.
 */
function bento_search_query_result($nid, $keywords) {
  $results_html = _process_system_query($nid, $keywords);
  print $results_html;
  drupal_exit();
}

/**
 * Done with code related to search block. Now we deal with the Content Type
 * we create on install for the systems we want to search.
 */


/**
 * Implements hook_node_info(). Provides detail for new Content Type.
 */
function bento_box_search_node_info() {
  return array (
    'search_source' => array(
      'name' => t('Search Source'),
      'base' => 'search_source',
      'description' => t('Systems to be queried by Bento Box Search'),
      'has_title' => TRUE,
      'title_label' => t('Search Source Name'),
    )
  );
}

/**
 * Implements hook_form() for custom content type.
 */
function search_source_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Returns a list of search sources.
 *
 * @return
 *   A result set object containing the list of search sources.
 */
function _search_source_list() {
  // Use Database API to retrieve all Search Source Nodes.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created', 'uid'))
    ->condition('type', 'search_source')
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->addTag('node_access')
    ->execute();
  
  return $query;
}
